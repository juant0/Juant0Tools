using UnityEngine;

namespace Juant0Tools
{
    /// <summary>
    /// Base class for creating singleton MonoBehaviour instances.
    /// </summary>
    /// <typeparam name="T">The type of the singleton MonoBehaviour.</typeparam>
    /// <remarks>Avoid call Awake. Use OnAwake instead</remarks>
    public class SingletonMonobehaviour<T> : MonoBehaviour where T : Component
    {
        [Tooltip("Set this to true to make the singleton persistent across scene changes")]
        [Header("Singleton Settings")]
        [SerializeField] private bool doPersitent = false;
        protected static T instance;
        /// <summary>
        /// Gets the instance of the singleton MonoBehaviour.
        /// </summary>
        public static T Instance
        {
            get
            {
                if (instance == null)
                {
#if UNITY_2022_3_OR_NEWER
                    instance = FindAnyObjectByType<T>();
#else
                    instance = FindObjectOfType<T>();
#endif
                    if (instance == null)
                        instance = new GameObject($"{typeof(T).Name}_AutoGenerated").AddComponent<T>();
                }
                return instance;
            }
        }

        private void Awake()
        {
            InitilizeSinglenton();
            OnAwake();
        }

        /// <summary>
        /// Provides a customization point for derived classes when the MonoBehaviour is awakened.
        /// This method is called after the singleton initialization in Awake().
        /// </summary>
        protected virtual void OnAwake()
        {
            // Intentionally left blank for subclasses to override
        }

        private void InitilizeSinglenton()
        {
            if (!Application.isPlaying)
                return;
            if (doPersitent)
                DontDestroyOnLoad(gameObject);
            if (instance != null)
            {
                Destroy(gameObject);
                return;
            }
            instance = this as T;

        }
    }
}
